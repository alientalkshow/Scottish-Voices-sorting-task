<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Speaker Sorting Task</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    #task-wrapper {
      display: flex;
      gap: 20px;
      margin-top: 20px;
    }
    #speaker-list {
      border: 1px solid #ccc;
      width: 160px;
      min-height: 400px;
      padding: 10px;
      background: #f9f9f9;
      overflow-y: auto;
      position: relative;
    }
    #sorting-container {
      border: 2px dashed #666;
      flex-grow: 1;
      min-height: 400px;
      background: #fff;
      position: relative;
    }
    .draggable {
      cursor: grab;
      user-select: none;
      background-color: black;
      color: white;
      padding: 8px;
      margin: 6px 0;
      text-align: center;
      border-radius: 4px;
      width: 120px;
      /* Don't set position or transform here, let JS handle it */
    }
    .draggable:active {
      cursor: grabbing;
    }
    /* Button style inside draggable */
    .speaker-button {
      all: unset;
      cursor: pointer;
      display: block;
      width: 100%;
      text-align: center;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <main>
    <section id="intro-section">
      <div class="intro-box">
        <h1>Welcome to the Speaker Sorting Task</h1>
        <form id="age-gender-form" novalidate>
          <label for="age">Age (4-17):</label>
          <input type="number" id="age" name="age" min="4" max="17" required />
          <label for="gender">Gender:</label>
          <input type="text" id="gender" name="gender" required />
          <button type="submit" class="blue-button">Start Task</button>
        </form>
        <div id="error-message" role="alert" aria-live="assertive"></div>
      </div>
    </section>

    <section id="sorting-section" style="display:none">
      <h2>Instructions</h2>
      <p>
        On the next slide, you will see a grid and 12 black rectangles with the initials of 12 speakers who all are saying the same sentence. Once you click on a rectangle you can hear the speaker. Your task is to listen to all speakers and to move the rectangles onto the grid to group them together by how similar they sound in how they speak. You can listen to the speakers as often as you want to, and you can build as few or as many groupings as you like. Below is just an example of what your groupings could look like.
      </p>
      <div id="task-wrapper">
        <div id="speaker-list" aria-label="Speakers to drag" tabindex="0"></div>
        <div id="sorting-container" aria-label="Speaker sorting grid" tabindex="0"></div>
      </div>
    </section>
  </main>

  <!-- Interact.js CDN -->
  <script src="https://cdn.jsdelivr.net/npm/@interactjs/interactjs/index.min.js"></script>
  <script>
    const conditions = {
      M_SSEvsP1: ['GI','PX','TV','BF','MB','CQ','KN','UI','EQ','TE','DM','EW'],
      // ... other conditions omitted for brevity
    };

    let audioPlaying = null;

    function getConditionFromUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      const cond = urlParams.get('cond');
      if (cond && conditions[cond]) return cond;
      const keys = Object.keys(conditions);
      return keys[Math.floor(Math.random() * keys.length)];
    }

    function setupAudioControl(button, audio) {
      button.addEventListener('click', () => {
        if (audioPlaying && audioPlaying !== audio) {
          audioPlaying.pause();
          audioPlaying.currentTime = 0;
        }
        if (audio.paused) {
          audio.play();
          audioPlaying = audio;
        } else {
          audio.pause();
          audioPlaying = null;
        }
      });
    }

    function createSpeakerDiv(initials) {
      const div = document.createElement('div');
      div.className = 'draggable';
      div.dataset.id = initials;

      const audio = document.createElement('audio');
      audio.src = `audio/${initials}.wav`;
      audio.preload = 'none';

      const btn = document.createElement('button');
      btn.type = 'button';
      btn.textContent = initials;
      btn.className = 'speaker-button';

      setupAudioControl(btn, audio);

      div.appendChild(btn);
      div.appendChild(audio);

      // Reset styles for dragging
      div.style.position = ''; 
      div.style.transform = '';
      div.setAttribute('data-x', 0);
      div.setAttribute('data-y', 0);

      return div;
    }

    function initSorting(conditionKey) {
      const speakers = conditions[conditionKey];
      const speakerList = document.getElementById('speaker-list');
      const container = document.getElementById('sorting-container');
      speakerList.innerHTML = '';
      container.innerHTML = '';

      speakers.forEach((initials) => {
        const speakerDiv = createSpeakerDiv(initials);
        speakerList.appendChild(speakerDiv);
      });

      interact('.draggable').draggable({
        inertia: true,
        modifiers: [
          // No restriction for now so you can drag anywhere
        ],
        listeners: {
          start(event) {
            const target = event.target;
            if (target.parentElement.id === 'speaker-list') {
              // Move item to sorting container for dragging
              const container = document.getElementById('sorting-container');
              container.appendChild(target);
              target.style.position = 'absolute';
              target.style.left = '0px';
              target.style.top = '0px';
              target.style.transform = 'translate(0px, 0px)';
              target.setAttribute('data-x', 0);
              target.setAttribute('data-y', 0);
            }
          },
          move(event) {
            const target = event.target;

            let x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
            let y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

            target.style.transform = `translate(${x}px, ${y}px)`;

            target.setAttribute('data-x', x);
            target.setAttribute('data-y', y);
          }
        }
      });
    }

    function showError(msg) {
      const errEl = document.getElementById('error-message');
      errEl.textContent = msg;
      errEl.style.display = 'block';
    }

    function hideError() {
      const errEl = document.getElementById('error-message');
      errEl.textContent = '';
      errEl.style.display = 'none';
    }

    document.getElementById('age-gender-form').addEventListener('submit', (e) => {
      e.preventDefault();
      hideError();

      const ageInput = document.getElementById('age');
      const genderInput = document.getElementById('gender');
      const age = parseInt(ageInput.value, 10);
      const gender = genderInput.value.trim();

      if (isNaN(age) || age < 4 || age > 17) {
        showError('Please enter a valid age between 4 and 17.');
        ageInput.focus();
        return;
      }

      if (!gender) {
        showError('Please enter your gender.');
        genderInput.focus();
        return;
      }

      document.getElementById('intro-section').style.display = 'none';
      document.getElementById('sorting-section').style.display = 'block';

      const condition = getConditionFromUrl();
      initSorting(condition);
    });
  </script>
</body>
</html>

